- Fix headers to include only what they use. Make headers include 1 other header maximum and separate implementation in source files.

- Implement platform specific functionality and compile on Linux.

- Make library header-only without source files.
- Inline cephes and tlsf.
- Strip down math functions to bare minimum.

- Remove modules since they don't really fix anything with C++, compilers don't support them even after 3 years. Sigh, it was a nice experiment at least.

- Simplify no-crt stuff on Windows, currently that's too much code,
  also document the compiler versions it works on.
  
- Always use cephes math functions.
- Provide common stdlib functions when building with no-crt.
- To robustly implement the two above it'd be worth to look into symbol patching. That way it's sure the code is the same on all platforms, regardless of compiler (this, along with allowing glibc to merge Linux sys calls with stdlib functionality is one of the biggest mistakes in C++).

- Hi-jack thread creation APIs to initialize context on all platforms (once we have symbol patching).
  
- As per Rayn Fleury's method of programming, which I like, implement the notion of arenas throughout the library. Everything should be an arena. Dynamic arrays should be lists (like linked lists).
- Extension on the above: If you want a contigous dynamic array, just VirtualAlloc 64 GB of data as an arena and push to commit to that. Once we do the memory visualization tool it'd be nice to see visually what the program is doing.
	  
- More robust memory model for stuff the library allocates (see note in premake5.lua). It would be nice to visualize all the memory that is commited by the library and the user. 
- Extension on the above: Make an awesome memory viewer.
- Extension on the extension: ? Also profiler in the future	

- Write more unit tests once the library finally settles down for 1.0 release, also test small applications where stuff works together.

- Remove code point ref being able to change string, instead provide map function. 

		   
- lstd-graphics: Make monitors and cursors handles (like window).
  Typedef them to void * and move all functions outside? There is really no need for a class. 
  
parse.h:
- Parse floats
- // @TODO: Potentially useful?
  // bool BasePrefixCountedTowardsMaxDigits = true;
  // bool ByteToDigitIgnoreThisByteCountedTowardsMaxDigits = true; 
 

fmt.h:
- Hex floats
- Printable code point
- Escaping (+ unicode) - this would cerror reporting in the default error function
- Digit grouping
- Locale
- printf-like format string parsing (because it is used so commonly)
- Check arguments at compile time


README.md:
- Section about attributions
- Credit Python for big_integer and path module
- Credit apex memmove
- Credit MSVC standard library source code for windows_no_crt
- Credit glibc for fast memmove, memset, memcmp
- Credit linalg.h (light-std-graphics)



Nice extras:
- File mapping API

- API for watching directory changes
  ... and an asset catalog system

- time.h? (probably use Jonathan Blow's Apollo time)    
- random.h?
- regex.h?


				

				
				
				
				
				
				
				
				
				
				
				
				
				

-----------------LOC:      
      
			    80394
		        ----
		        80115
		        79664
		        79336
				79196
				79005
				78949
				77359
				62125 <-- interesting this still dropped, because we added a million 
				          lines in order to get rid of every header dependency (CRT and Windows.h)
				63004 <-- +1000 lines in windows.h (API used in lstd-graphics)
				35362 <-- big win here!
				24642 <-- removed manual windows error code descriptions
				24064
				23978
				24497
				24307
				24403
				24070
				27370 <-- cloc.exe wasn't counting .ixx files as C++, oops!
				28935
				23055
				22085
				21851
				21325
				21704
