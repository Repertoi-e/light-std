Project structure
- vendor
- common functions with no crt
- decouple lstd and lstd-graphics
  This would probably involve somehow managing a linker table
  with functions that should run with the initialization of the lstd.
  This would be flexible enough to allow easily adding new modules
  just by linking with them and even allow the user to add their own routines.
	   
- Constexpr allocations, fully constexpr string, array, etc.
	 
- Make monitors and cursors handles (like window).
  Typedef them to void * and move all functions outside? There is really no need for a class. 
	  
	  
- More robust memory model for stuff the library allocates (see note in premake5.lua)
	
	Save even mOrE info and make an awesome memory viewer,
	so you can see what your program is doing.
	
	Also profiler in the future?
	
- common.h: @TODO: Merge using is_constant_evaluated()
	
  
  
- File reading API (currently we have two functions, is that enough?)
  At least file_writer...
- Also file mapping


- Fix check stack 


Hash table:
- Default hasher for any type by looking at the bytes 


fmt module:
- Printable code point
- Escaping (+ unicode) - this would cerror reporting in the default error function
- Digit grouping
- Locale
- printf-like format string parsing (because it is used so commonly)
- Check arguments at compile time


README.md:
- Build section
- Section about attributions
- Credit Python for big_integer and path module
- Credit apex memmove
- Credit MSVC standard library source code for windows_no_crt



- API for watching directory changes
  ... and an asset catalog system


Tests with parse_guid_options


// @TODO: Potentially useful?
// bool BasePrefixCountedTowardsMaxDigits = true;
// bool ByteToDigitIgnoreThisByteCountedTowardsMaxDigits = true; 


----------------- Things not hapenning for a while probably:

- Time module?    
- Random module?
- Regex module?

Data structures and lock-free data structures

Allow users to add more variables to Implicit_Context

Implement platform specific functionality and compile on linux.
(This is probably never going to happen if I continue to work on this alone LMAO)

				

				
				
				
				
				
				
				
				
				
				
				
				
				

-----------------LOC:      
      
			    80394
		        ----
		        80115
		        79664
		        79336
				79196
				79005
				78949
				77359
				62125 <-- interesting this still dropped, because we added a million 
				          lines in order to get rid of every header dependency (CRT and Windows.h)
				63004 <-- +1000 lines in windows.h (API used in lstd-graphics)
				35362 <-- big win here!
				24642 <-- removed manual windows error code descriptions
				24064
				23978
				24497
				24307
				24403
				24070
				27370 <-- cloc.exe wasn't counting .ixx files as C++, oops!
				28935
				
				18953
				
				
