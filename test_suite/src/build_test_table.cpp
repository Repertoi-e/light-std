#include "test.h"

//
// This file was automatically generated by build_tests.py
//

void build_test_table() {
    make_dynamic(get(&g_TestTable, string("bits.cpp")), 2);
    extern void test_msb();
    add(g_TestTable[string("bits.cpp")], test{"msb", test_msb});
    extern void test_lsb();
    add(g_TestTable[string("bits.cpp")], test{"lsb", test_lsb});
    make_dynamic(g_TestTable[string("file.cpp")], 2);
    extern void test_path_manipulation();
    add(g_TestTable[string("file.cpp")], test{"path_manipulation", test_path_manipulation});
    extern void test_file_size();
    add(g_TestTable[string("file.cpp")], test{"file_size", test_file_size});
    make_dynamic(g_TestTable[string("fmt.cpp")], 41);
    extern void test_write_bool();
    add(g_TestTable[string("fmt.cpp")], test{"write_bool", test_write_bool});
    extern void test_write_integer_16();
    add(g_TestTable[string("fmt.cpp")], test{"write_integer_16", test_write_integer_16});
    extern void test_write_integer_32();
    add(g_TestTable[string("fmt.cpp")], test{"write_integer_32", test_write_integer_32});
    extern void test_write_integer_64();
    add(g_TestTable[string("fmt.cpp")], test{"write_integer_64", test_write_integer_64});
    extern void test_write_f64();
    add(g_TestTable[string("fmt.cpp")], test{"write_f64", test_write_f64});
    extern void test_write_code_point();
    add(g_TestTable[string("fmt.cpp")], test{"write_code_point", test_write_code_point});
    extern void test_format_int();
    add(g_TestTable[string("fmt.cpp")], test{"format_int", test_format_int});
    extern void test_format_int_binary();
    add(g_TestTable[string("fmt.cpp")], test{"format_int_binary", test_format_int_binary});
    extern void test_format_int_octal();
    add(g_TestTable[string("fmt.cpp")], test{"format_int_octal", test_format_int_octal});
    extern void test_format_int_decimal();
    add(g_TestTable[string("fmt.cpp")], test{"format_int_decimal", test_format_int_decimal});
    extern void test_format_int_hexadecimal();
    add(g_TestTable[string("fmt.cpp")], test{"format_int_hexadecimal", test_format_int_hexadecimal});
    extern void test_format_int_localeish();
    add(g_TestTable[string("fmt.cpp")], test{"format_int_localeish", test_format_int_localeish});
    extern void test_format_f32();
    add(g_TestTable[string("fmt.cpp")], test{"format_f32", test_format_f32});
    extern void test_format_f64();
    add(g_TestTable[string("fmt.cpp")], test{"format_f64", test_format_f64});
    extern void test_format_nan();
    add(g_TestTable[string("fmt.cpp")], test{"format_nan", test_format_nan});
    extern void test_format_inf();
    add(g_TestTable[string("fmt.cpp")], test{"format_inf", test_format_inf});
    extern void test_format_custom();
    add(g_TestTable[string("fmt.cpp")], test{"format_custom", test_format_custom});
    extern void test_precision_rounding();
    add(g_TestTable[string("fmt.cpp")], test{"precision_rounding", test_precision_rounding});
    extern void test_prettify_float();
    add(g_TestTable[string("fmt.cpp")], test{"prettify_float", test_prettify_float});
    extern void test_escape_brackets();
    add(g_TestTable[string("fmt.cpp")], test{"escape_brackets", test_escape_brackets});
    extern void test_args_in_different_positions();
    add(g_TestTable[string("fmt.cpp")], test{"args_in_different_positions", test_args_in_different_positions});
    extern void test_args_errors();
    add(g_TestTable[string("fmt.cpp")], test{"args_errors", test_args_errors});
    extern void test_many_args();
    add(g_TestTable[string("fmt.cpp")], test{"many_args", test_many_args});
    extern void test_auto_arg_index();
    add(g_TestTable[string("fmt.cpp")], test{"auto_arg_index", test_auto_arg_index});
    extern void test_empty_specs();
    add(g_TestTable[string("fmt.cpp")], test{"empty_specs", test_empty_specs});
    extern void test_left_align();
    add(g_TestTable[string("fmt.cpp")], test{"left_align", test_left_align});
    extern void test_right_align();
    add(g_TestTable[string("fmt.cpp")], test{"right_align", test_right_align});
    extern void test_numeric_align();
    add(g_TestTable[string("fmt.cpp")], test{"numeric_align", test_numeric_align});
    extern void test_center_align();
    add(g_TestTable[string("fmt.cpp")], test{"center_align", test_center_align});
    extern void test_fill();
    add(g_TestTable[string("fmt.cpp")], test{"fill", test_fill});
    extern void test_plus_sign();
    add(g_TestTable[string("fmt.cpp")], test{"plus_sign", test_plus_sign});
    extern void test_minus_sign();
    add(g_TestTable[string("fmt.cpp")], test{"minus_sign", test_minus_sign});
    extern void test_space_sign();
    add(g_TestTable[string("fmt.cpp")], test{"space_sign", test_space_sign});
    extern void test_hash_flag();
    add(g_TestTable[string("fmt.cpp")], test{"hash_flag", test_hash_flag});
    extern void test_zero_flag();
    add(g_TestTable[string("fmt.cpp")], test{"zero_flag", test_zero_flag});
    extern void test_width();
    add(g_TestTable[string("fmt.cpp")], test{"width", test_width});
    extern void test_dynamic_width();
    add(g_TestTable[string("fmt.cpp")], test{"dynamic_width", test_dynamic_width});
    extern void test_precision();
    add(g_TestTable[string("fmt.cpp")], test{"precision", test_precision});
    extern void test_benchmark_string();
    add(g_TestTable[string("fmt.cpp")], test{"benchmark_string", test_benchmark_string});
    extern void test_dynamic_precision();
    add(g_TestTable[string("fmt.cpp")], test{"dynamic_precision", test_dynamic_precision});
    extern void test_colors_and_emphasis();
    add(g_TestTable[string("fmt.cpp")], test{"colors_and_emphasis", test_colors_and_emphasis});
    make_dynamic(g_TestTable[string("parse.cpp")], 3);
    extern void test_int();
    add(g_TestTable[string("parse.cpp")], test{"int", test_int});
    extern void test_bool();
    add(g_TestTable[string("parse.cpp")], test{"bool", test_bool});
    extern void test_guid();
    add(g_TestTable[string("parse.cpp")], test{"guid", test_guid});
    make_dynamic(g_TestTable[string("range.cpp")], 3);
    extern void test_basic();
    add(g_TestTable[string("range.cpp")], test{"basic", test_basic});
    extern void test_variable_steps();
    add(g_TestTable[string("range.cpp")], test{"variable_steps", test_variable_steps});
    extern void test_reverse();
    add(g_TestTable[string("range.cpp")], test{"reverse", test_reverse});
    make_dynamic(g_TestTable[string("signal.cpp")], 3);
    extern void test_global_function_delegate();
    add(g_TestTable[string("signal.cpp")], test{"global_function_delegate", test_global_function_delegate});
    extern void test_member_function_delegate();
    add(g_TestTable[string("signal.cpp")], test{"member_function_delegate", test_member_function_delegate});
    extern void test_functor_delegate();
    add(g_TestTable[string("signal.cpp")], test{"functor_delegate", test_functor_delegate});
    make_dynamic(g_TestTable[string("storage.cpp")], 5);
    extern void test_stack_array();
    add(g_TestTable[string("storage.cpp")], test{"stack_array", test_stack_array});
    extern void test_array();
    add(g_TestTable[string("storage.cpp")], test{"array", test_array});
    extern void test_hash_table();
    add(g_TestTable[string("storage.cpp")], test{"hash_table", test_hash_table});
    extern void test_hash_table_clone();
    add(g_TestTable[string("storage.cpp")], test{"hash_table_clone", test_hash_table_clone});
    extern void test_hash_table_alignment();
    add(g_TestTable[string("storage.cpp")], test{"hash_table_alignment", test_hash_table_alignment});
    make_dynamic(g_TestTable[string("string.cpp")], 16);
    extern void test_code_point_size();
    add(g_TestTable[string("string.cpp")], test{"code_point_size", test_code_point_size});
    extern void test_substring();
    add(g_TestTable[string("string.cpp")], test{"substring", test_substring});
    extern void test_substring_mixed_sizes();
    add(g_TestTable[string("string.cpp")], test{"substring_mixed_sizes", test_substring_mixed_sizes});
    extern void test_index();
    add(g_TestTable[string("string.cpp")], test{"index", test_index});
    extern void test_insert();
    add(g_TestTable[string("string.cpp")], test{"insert", test_insert});
    extern void test_remove();
    add(g_TestTable[string("string.cpp")], test{"remove", test_remove});
    extern void test_trim();
    add(g_TestTable[string("string.cpp")], test{"trim", test_trim});
    extern void test_match_beginning();
    add(g_TestTable[string("string.cpp")], test{"match_beginning", test_match_beginning});
    extern void test_match_end();
    add(g_TestTable[string("string.cpp")], test{"match_end", test_match_end});
    extern void test_set();
    add(g_TestTable[string("string.cpp")], test{"set", test_set});
    extern void test_iterator();
    add(g_TestTable[string("string.cpp")], test{"iterator", test_iterator});
    extern void test_append();
    add(g_TestTable[string("string.cpp")], test{"append", test_append});
    extern void test_builder();
    add(g_TestTable[string("string.cpp")], test{"builder", test_builder});
    extern void test_remove_all();
    add(g_TestTable[string("string.cpp")], test{"remove_all", test_remove_all});
    extern void test_replace_all();
    add(g_TestTable[string("string.cpp")], test{"replace_all", test_replace_all});
    extern void test_find();
    add(g_TestTable[string("string.cpp")], test{"find", test_find});
    make_dynamic(g_TestTable[string("thread.cpp")], 8);
    extern void test_hardware_concurrency();
    add(g_TestTable[string("thread.cpp")], test{"hardware_concurrency", test_hardware_concurrency});
    extern void test_ids();
    add(g_TestTable[string("thread.cpp")], test{"ids", test_ids});
    extern void test_thread_local_storage();
    add(g_TestTable[string("thread.cpp")], test{"thread_local_storage", test_thread_local_storage});
    extern void test_lock_free();
    add(g_TestTable[string("thread.cpp")], test{"lock_free", test_lock_free});
    extern void test_mutex_lock();
    add(g_TestTable[string("thread.cpp")], test{"mutex_lock", test_mutex_lock});
    extern void test_fast_mutex_lock();
    add(g_TestTable[string("thread.cpp")], test{"fast_mutex_lock", test_fast_mutex_lock});
    extern void test_condition_variable();
    add(g_TestTable[string("thread.cpp")], test{"condition_variable", test_condition_variable});
    extern void test_context();
    add(g_TestTable[string("thread.cpp")], test{"context", test_context});
}
