#include "test.h"

//
// This file was automatically generated by build_tests.py
//

void build_test_table() {
    make_dynamic(g_TestTable[string("bits.cpp")], 2);
    extern void test_msb();
    add(g_TestTable[string("bits.cpp")], test{"msb", test_msb});
    extern void test_lsb();
    add(g_TestTable[string("bits.cpp")], test{"lsb", test_lsb});
    make_dynamic(g_TestTable[string("file.cpp")], 2);
    extern void test_path_manipulation();
    add(g_TestTable[string("file.cpp")], test{"path_manipulation", test_path_manipulation});
    extern void test_file_size();
    add(g_TestTable[string("file.cpp")], test{"file_size", test_file_size});

    make_dynamic(g_TestTable[string("fmt.cpp")], 41);
    extern void test_write_bool();
    add(g_TestTable[string("fmt.cpp")], test{"write_bool", test_write_bool});
    extern void test_write_integer_16();
    add(g_TestTable[string("fmt.cpp")], test{"write_integer_16", test_write_integer_16});
    extern void test_write_integer_32();
    add(g_TestTable[string("fmt.cpp")], test{"write_integer_32", test_write_integer_32});
    extern void test_write_integer_64();
    add(g_TestTable[string("fmt.cpp")], test{"write_integer_64", test_write_integer_64});
    extern void test_write_f64();
    add(g_TestTable[string("fmt.cpp")], test{"write_f64", test_write_f64});
    extern void test_write_code_point();
    add(g_TestTable[string("fmt.cpp")], test{"write_code_point", test_write_code_point});
    extern void test_format_int();
    add(g_TestTable[string("fmt.cpp")], test{"format_int", test_format_int});
    extern void test_format_int_binary();
    add(g_TestTable[string("fmt.cpp")], test{"format_int_binary", test_format_int_binary});
    extern void test_format_int_octal();
    add(g_TestTable[string("fmt.cpp")], test{"format_int_octal", test_format_int_octal});
    extern void test_format_int_decimal();
    add(g_TestTable[string("fmt.cpp")], test{"format_int_decimal", test_format_int_decimal});
    extern void test_format_int_hexadecimal();
    add(g_TestTable[string("fmt.cpp")], test{"format_int_hexadecimal", test_format_int_hexadecimal});
    extern void test_format_int_localeish();
    add(g_TestTable[string("fmt.cpp")], test{"format_int_localeish", test_format_int_localeish});
    extern void test_format_f32();
    add(g_TestTable[string("fmt.cpp")], test{"format_f32", test_format_f32});
    extern void test_format_f64();
    add(g_TestTable[string("fmt.cpp")], test{"format_f64", test_format_f64});
    extern void test_format_nan();
    add(g_TestTable[string("fmt.cpp")], test{"format_nan", test_format_nan});
    extern void test_format_inf();
    add(g_TestTable[string("fmt.cpp")], test{"format_inf", test_format_inf});
    extern void test_format_custom();
    add(g_TestTable[string("fmt.cpp")], test{"format_custom", test_format_custom});
    extern void test_precision_rounding();
    add(g_TestTable[string("fmt.cpp")], test{"precision_rounding", test_precision_rounding});
    extern void test_prettify_float();
    add(g_TestTable[string("fmt.cpp")], test{"prettify_float", test_prettify_float});
    extern void test_escape_brackets();
    add(g_TestTable[string("fmt.cpp")], test{"escape_brackets", test_escape_brackets});
    extern void test_args_in_different_positions();
    add(g_TestTable[string("fmt.cpp")], test{"args_in_different_positions", test_args_in_different_positions});
    extern void test_args_errors();
    add(g_TestTable[string("fmt.cpp")], test{"args_errors", test_args_errors});
    extern void test_many_args();
    add(g_TestTable[string("fmt.cpp")], test{"many_args", test_many_args});
    extern void test_auto_arg_index();
    add(g_TestTable[string("fmt.cpp")], test{"auto_arg_index", test_auto_arg_index});
    extern void test_empty_specs();
    add(g_TestTable[string("fmt.cpp")], test{"empty_specs", test_empty_specs});
    extern void test_left_align();
    add(g_TestTable[string("fmt.cpp")], test{"left_align", test_left_align});
    extern void test_right_align();
    add(g_TestTable[string("fmt.cpp")], test{"right_align", test_right_align});
    extern void test_numeric_align();
    add(g_TestTable[string("fmt.cpp")], test{"numeric_align", test_numeric_align});
    extern void test_center_align();
    add(g_TestTable[string("fmt.cpp")], test{"center_align", test_center_align});
    extern void test_fill();
    add(g_TestTable[string("fmt.cpp")], test{"fill", test_fill});
    extern void test_plus_sign();
    add(g_TestTable[string("fmt.cpp")], test{"plus_sign", test_plus_sign});
    extern void test_minus_sign();
    add(g_TestTable[string("fmt.cpp")], test{"minus_sign", test_minus_sign});
    extern void test_space_sign();
    add(g_TestTable[string("fmt.cpp")], test{"space_sign", test_space_sign});
    extern void test_hash_flag();
    add(g_TestTable[string("fmt.cpp")], test{"hash_flag", test_hash_flag});
    extern void test_zero_flag();
    add(g_TestTable[string("fmt.cpp")], test{"zero_flag", test_zero_flag});
    extern void test_width();
    add(g_TestTable[string("fmt.cpp")], test{"width", test_width});
    extern void test_dynamic_width();
    add(g_TestTable[string("fmt.cpp")], test{"dynamic_width", test_dynamic_width});
    extern void test_precision();
    add(g_TestTable[string("fmt.cpp")], test{"precision", test_precision});
    extern void test_benchmark_string();
    add(g_TestTable[string("fmt.cpp")], test{"benchmark_string", test_benchmark_string});
    extern void test_dynamic_precision();
    add(g_TestTable[string("fmt.cpp")], test{"dynamic_precision", test_dynamic_precision});
    extern void test_colors_and_emphasis();
    add(g_TestTable[string("fmt.cpp")], test{"colors_and_emphasis", test_colors_and_emphasis});
    make_dynamic(g_TestTable[string("mat.cpp")], 40);
    extern void test_ctor_and_index();
    add(g_TestTable[string("mat.cpp")], test{"ctor_and_index", test_ctor_and_index});
    extern void test_thin_mat_from_vec();
    add(g_TestTable[string("mat.cpp")], test{"thin_mat_from_vec", test_thin_mat_from_vec});
    extern void test_thin_mat_to_vec();
    add(g_TestTable[string("mat.cpp")], test{"thin_mat_to_vec", test_thin_mat_to_vec});
    extern void test_thin_mat_short_index();
    add(g_TestTable[string("mat.cpp")], test{"thin_mat_short_index", test_thin_mat_short_index});
    extern void test_view();
    add(g_TestTable[string("mat.cpp")], test{"view", test_view});
    extern void test_mat_add();
    add(g_TestTable[string("mat.cpp")], test{"mat_add", test_mat_add});
    extern void test_mat_subtract();
    add(g_TestTable[string("mat.cpp")], test{"mat_subtract", test_mat_subtract});
    extern void test_mat_multiply_square();
    add(g_TestTable[string("mat.cpp")], test{"mat_multiply_square", test_mat_multiply_square});
    extern void test_mat_multiply_arbitrary();
    add(g_TestTable[string("mat.cpp")], test{"mat_multiply_arbitrary", test_mat_multiply_arbitrary});
    extern void test_mat_scalar_multiply();
    add(g_TestTable[string("mat.cpp")], test{"mat_scalar_multiply", test_mat_scalar_multiply});
    extern void test_mat_scalar_divide();
    add(g_TestTable[string("mat.cpp")], test{"mat_scalar_divide", test_mat_scalar_divide});
    extern void test_scalar_mat_multiply();
    add(g_TestTable[string("mat.cpp")], test{"scalar_mat_multiply", test_scalar_mat_multiply});
    extern void test_scalar_mat_divide();
    add(g_TestTable[string("mat.cpp")], test{"scalar_mat_divide", test_scalar_mat_divide});
    extern void test_scalar_compound_multiply();
    add(g_TestTable[string("mat.cpp")], test{"scalar_compound_multiply", test_scalar_compound_multiply});
    extern void test_scalar_compound_divide();
    add(g_TestTable[string("mat.cpp")], test{"scalar_compound_divide", test_scalar_compound_divide});
    extern void test_vec_square_multiply();
    add(g_TestTable[string("mat.cpp")], test{"vec_square_multiply", test_vec_square_multiply});
    extern void test_vec_non_square_multiply();
    add(g_TestTable[string("mat.cpp")], test{"vec_non_square_multiply", test_vec_non_square_multiply});
    extern void test_vec_implicit_affine_multiply();
    add(g_TestTable[string("mat.cpp")], test{"vec_implicit_affine_multiply", test_vec_implicit_affine_multiply});
    extern void test_vec_implicit_homogeneous_multiply();
    add(g_TestTable[string("mat.cpp")], test{"vec_implicit_homogeneous_multiply", test_vec_implicit_homogeneous_multiply});
    extern void test_trace();
    add(g_TestTable[string("mat.cpp")], test{"trace", test_trace});
    extern void test_transpose();
    add(g_TestTable[string("mat.cpp")], test{"transpose", test_transpose});
    extern void test_det_small();
    add(g_TestTable[string("mat.cpp")], test{"det_small", test_det_small});
    extern void test_det();
    add(g_TestTable[string("mat.cpp")], test{"det", test_det});
    extern void test_inverse_small();
    add(g_TestTable[string("mat.cpp")], test{"inverse_small", test_inverse_small});
    extern void test_inverse();
    add(g_TestTable[string("mat.cpp")], test{"inverse", test_inverse});
    extern void test_norm();
    add(g_TestTable[string("mat.cpp")], test{"norm", test_norm});
    extern void test_lu_decomposition();
    add(g_TestTable[string("mat.cpp")], test{"lu_decomposition", test_lu_decomposition});
    extern void test_lu_solve();
    add(g_TestTable[string("mat.cpp")], test{"lu_solve", test_lu_solve});
    extern void test_lup_decomposition();
    add(g_TestTable[string("mat.cpp")], test{"lup_decomposition", test_lup_decomposition});
    extern void test_lup_solve();
    add(g_TestTable[string("mat.cpp")], test{"lup_solve", test_lup_solve});
    extern void test_lup_decomposition_singular();
    add(g_TestTable[string("mat.cpp")], test{"lup_decomposition_singular", test_lup_decomposition_singular});
    extern void test_qr_decomposition();
    add(g_TestTable[string("mat.cpp")], test{"qr_decomposition", test_qr_decomposition});
    extern void test_transform_identity();
    add(g_TestTable[string("mat.cpp")], test{"transform_identity", test_transform_identity});
    extern void test_transform_zero();
    add(g_TestTable[string("mat.cpp")], test{"transform_zero", test_transform_zero});
    extern void test_transform_rotation_2d();
    add(g_TestTable[string("mat.cpp")], test{"transform_rotation_2d", test_transform_rotation_2d});
    extern void test_transform_rotation_principal();
    add(g_TestTable[string("mat.cpp")], test{"transform_rotation_principal", test_transform_rotation_principal});
    extern void test_transform_rotation_tri_axis();
    add(g_TestTable[string("mat.cpp")], test{"transform_rotation_tri_axis", test_transform_rotation_tri_axis});
    extern void test_transform_rotation_axis_angle();
    add(g_TestTable[string("mat.cpp")], test{"transform_rotation_axis_angle", test_transform_rotation_axis_angle});
    extern void test_transform_scale();
    add(g_TestTable[string("mat.cpp")], test{"transform_scale", test_transform_scale});
    extern void test_transform_translation();
    add(g_TestTable[string("mat.cpp")], test{"transform_translation", test_transform_translation});
    extern void test_transform_orthographic();
    add(g_TestTable[string("mat.cpp")], test{"transform_orthographic", test_transform_orthographic});
    extern void test_transform_view();
    add(g_TestTable[string("mat.cpp")], test{"transform_view", test_transform_view});
    extern void test_transform_view_2d();
    add(g_TestTable[string("mat.cpp")], test{"transform_view_2d", test_transform_view_2d});
    make_dynamic(g_TestTable[string("parse.cpp")], 3);
    extern void test_int();
    add(g_TestTable[string("parse.cpp")], test{"int", test_int});
    extern void test_bool();
    add(g_TestTable[string("parse.cpp")], test{"bool", test_bool});
    extern void test_guid();
    add(g_TestTable[string("parse.cpp")], test{"guid", test_guid});
    make_dynamic(g_TestTable[string("quat.cpp")], 12);
    extern void test_quat_ctor();
    add(g_TestTable[string("quat.cpp")], test{"quat_ctor", test_quat_ctor});
    extern void test_axis_angle();
    add(g_TestTable[string("quat.cpp")], test{"axis_angle", test_axis_angle});
    extern void test_tri_axis();
    add(g_TestTable[string("quat.cpp")], test{"tri_axis", test_tri_axis});
    extern void test_query_axis_angle();
    add(g_TestTable[string("quat.cpp")], test{"query_axis_angle", test_query_axis_angle});
    extern void test_to_mat();
    add(g_TestTable[string("quat.cpp")], test{"to_mat", test_to_mat});
    extern void test_from_mat();
    add(g_TestTable[string("quat.cpp")], test{"from_mat", test_from_mat});
    extern void test_add_subtract();
    add(g_TestTable[string("quat.cpp")], test{"add_subtract", test_add_subtract});
    extern void test_product();
    add(g_TestTable[string("quat.cpp")], test{"product", test_product});
    extern void test_vec_rotation();
    add(g_TestTable[string("quat.cpp")], test{"vec_rotation", test_vec_rotation});
    extern void test_chaining();
    add(g_TestTable[string("quat.cpp")], test{"chaining", test_chaining});
    extern void test_exp_ln();
    add(g_TestTable[string("quat.cpp")], test{"exp_ln", test_exp_ln});
    extern void test_pow();
    add(g_TestTable[string("quat.cpp")], test{"pow", test_pow});
    make_dynamic(g_TestTable[string("range.cpp")], 3);
    extern void test_basic();
    add(g_TestTable[string("range.cpp")], test{"basic", test_basic});
    extern void test_variable_steps();
    add(g_TestTable[string("range.cpp")], test{"variable_steps", test_variable_steps});
    extern void test_reverse();
    add(g_TestTable[string("range.cpp")], test{"reverse", test_reverse});
    make_dynamic(g_TestTable[string("signal.cpp")], 5);
    extern void test_global_function();
    add(g_TestTable[string("signal.cpp")], test{"global_function", test_global_function});
    extern void test_member_function();
    add(g_TestTable[string("signal.cpp")], test{"member_function", test_member_function});
    extern void test_global_function_delegate();
    add(g_TestTable[string("signal.cpp")], test{"global_function_delegate", test_global_function_delegate});
    extern void test_member_function_delegate();
    add(g_TestTable[string("signal.cpp")], test{"member_function_delegate", test_member_function_delegate});
    extern void test_functor_delegate();
    add(g_TestTable[string("signal.cpp")], test{"functor_delegate", test_functor_delegate});
    make_dynamic(g_TestTable[string("storage.cpp")], 5);
    extern void test_stack_array();
    add(g_TestTable[string("storage.cpp")], test{"stack_array", test_stack_array});
    extern void test_array();
    add(g_TestTable[string("storage.cpp")], test{"array", test_array});
    extern void test_hash_table();
    add(g_TestTable[string("storage.cpp")], test{"hash_table", test_hash_table});
    extern void test_hash_table_clone();
    add(g_TestTable[string("storage.cpp")], test{"hash_table_clone", test_hash_table_clone});
    extern void test_hash_table_alignment();
    add(g_TestTable[string("storage.cpp")], test{"hash_table_alignment", test_hash_table_alignment});
    make_dynamic(g_TestTable[string("string.cpp")], 17);
    extern void test_code_point_size();
    add(g_TestTable[string("string.cpp")], test{"code_point_size", test_code_point_size});
    extern void test_substring();
    add(g_TestTable[string("string.cpp")], test{"substring", test_substring});
    extern void test_substring_mixed_sizes();
    add(g_TestTable[string("string.cpp")], test{"substring_mixed_sizes", test_substring_mixed_sizes});
    extern void test_index();
    add(g_TestTable[string("string.cpp")], test{"index", test_index});
    extern void test_insert();
    add(g_TestTable[string("string.cpp")], test{"insert", test_insert});
    extern void test_remove();
    add(g_TestTable[string("string.cpp")], test{"remove", test_remove});
    extern void test_trim();
    add(g_TestTable[string("string.cpp")], test{"trim", test_trim});
    extern void test_match_beginning();
    add(g_TestTable[string("string.cpp")], test{"match_beginning", test_match_beginning});
    extern void test_match_end();
    add(g_TestTable[string("string.cpp")], test{"match_end", test_match_end});
    extern void test_set();
    add(g_TestTable[string("string.cpp")], test{"set", test_set});
    extern void test_iterator();
    add(g_TestTable[string("string.cpp")], test{"iterator", test_iterator});
    extern void test_append();
    add(g_TestTable[string("string.cpp")], test{"append", test_append});
    extern void test_count();
    add(g_TestTable[string("string.cpp")], test{"count", test_count});
    extern void test_builder();
    add(g_TestTable[string("string.cpp")], test{"builder", test_builder});
    extern void test_remove_all();
    add(g_TestTable[string("string.cpp")], test{"remove_all", test_remove_all});
    extern void test_replace_all();
    add(g_TestTable[string("string.cpp")], test{"replace_all", test_replace_all});
    extern void test_find();
    add(g_TestTable[string("string.cpp")], test{"find", test_find});
    make_dynamic(g_TestTable[string("thread.cpp")], 8);
    extern void test_hardware_concurrency();
    add(g_TestTable[string("thread.cpp")], test{"hardware_concurrency", test_hardware_concurrency});
    extern void test_ids();
    add(g_TestTable[string("thread.cpp")], test{"ids", test_ids});
    extern void test_thread_local_storage();
    add(g_TestTable[string("thread.cpp")], test{"thread_local_storage", test_thread_local_storage});
    extern void test_lock_free();
    add(g_TestTable[string("thread.cpp")], test{"lock_free", test_lock_free});
    extern void test_mutex_lock();
    add(g_TestTable[string("thread.cpp")], test{"mutex_lock", test_mutex_lock});
    extern void test_fast_mutex_lock();
    add(g_TestTable[string("thread.cpp")], test{"fast_mutex_lock", test_fast_mutex_lock});
    extern void test_condition_variable();
    add(g_TestTable[string("thread.cpp")], test{"condition_variable", test_condition_variable});
    extern void test_context();
    add(g_TestTable[string("thread.cpp")], test{"context", test_context});
    make_dynamic(g_TestTable[string("vec.cpp")], 52);
    extern void test_vec_ctor();
    add(g_TestTable[string("vec.cpp")], test{"vec_ctor", test_vec_ctor});
    extern void test_ctor_array();
    add(g_TestTable[string("vec.cpp")], test{"ctor_array", test_ctor_array});
    extern void test_ctor_convert();
    add(g_TestTable[string("vec.cpp")], test{"ctor_convert", test_ctor_convert});
    extern void test_ctor_scalar();
    add(g_TestTable[string("vec.cpp")], test{"ctor_scalar", test_ctor_scalar});
    extern void test_ctor_mixed();
    add(g_TestTable[string("vec.cpp")], test{"ctor_mixed", test_ctor_mixed});
    extern void test_ctor_mixed_swizzle();
    add(g_TestTable[string("vec.cpp")], test{"ctor_mixed_swizzle", test_ctor_mixed_swizzle});
    extern void test_cast();
    add(g_TestTable[string("vec.cpp")], test{"cast", test_cast});
    extern void test_vec_index();
    add(g_TestTable[string("vec.cpp")], test{"vec_index", test_vec_index});
    extern void test_vec_iterator();
    add(g_TestTable[string("vec.cpp")], test{"vec_iterator", test_vec_iterator});
    extern void test_swizzle();
    add(g_TestTable[string("vec.cpp")], test{"swizzle", test_swizzle});
    extern void test_vec_add();
    add(g_TestTable[string("vec.cpp")], test{"vec_add", test_vec_add});
    extern void test_vec_subtract();
    add(g_TestTable[string("vec.cpp")], test{"vec_subtract", test_vec_subtract});
    extern void test_vec_multiply();
    add(g_TestTable[string("vec.cpp")], test{"vec_multiply", test_vec_multiply});
    extern void test_vec_divide();
    add(g_TestTable[string("vec.cpp")], test{"vec_divide", test_vec_divide});
    extern void test_vec_compound_add();
    add(g_TestTable[string("vec.cpp")], test{"vec_compound_add", test_vec_compound_add});
    extern void test_vec_compound_subtract();
    add(g_TestTable[string("vec.cpp")], test{"vec_compound_subtract", test_vec_compound_subtract});
    extern void test_vec_compound_multiply();
    add(g_TestTable[string("vec.cpp")], test{"vec_compound_multiply", test_vec_compound_multiply});
    extern void test_vec_compound_divide();
    add(g_TestTable[string("vec.cpp")], test{"vec_compound_divide", test_vec_compound_divide});
    extern void test_vec_scalar_add();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_add", test_vec_scalar_add});
    extern void test_vec_scalar_subtract();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_subtract", test_vec_scalar_subtract});
    extern void test_vec_scalar_multiply();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_multiply", test_vec_scalar_multiply});
    extern void test_vec_scalar_divide();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_divide", test_vec_scalar_divide});
    extern void test_vec_scalar_compound_add();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_compound_add", test_vec_scalar_compound_add});
    extern void test_vec_scalar_compound_subtract();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_compound_subtract", test_vec_scalar_compound_subtract});
    extern void test_vec_scalar_compound_multiply();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_compound_multiply", test_vec_scalar_compound_multiply});
    extern void test_vec_scalar_compound_divide();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_compound_divide", test_vec_scalar_compound_divide});
    extern void test_vec_scalar_reverse_add();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_reverse_add", test_vec_scalar_reverse_add});
    extern void test_vec_scalar_reverse_subtract();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_reverse_subtract", test_vec_scalar_reverse_subtract});
    extern void test_vec_scalar_reverse_multiply();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_reverse_multiply", test_vec_scalar_reverse_multiply});
    extern void test_vec_scalar_reverse_divide();
    add(g_TestTable[string("vec.cpp")], test{"vec_scalar_reverse_divide", test_vec_scalar_reverse_divide});
    extern void test_swizzle_vector_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_add", test_swizzle_vector_add});
    extern void test_swizzle_vector_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_subtract", test_swizzle_vector_subtract});
    extern void test_swizzle_vector_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_multiply", test_swizzle_vector_multiply});
    extern void test_swizzle_vector_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_divide", test_swizzle_vector_divide});
    extern void test_swizzle_vector_compound_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_compound_add", test_swizzle_vector_compound_add});
    extern void test_swizzle_vector_compound_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_compound_subtract", test_swizzle_vector_compound_subtract});
    extern void test_swizzle_vector_compound_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_compound_multiply", test_swizzle_vector_compound_multiply});
    extern void test_swizzle_vector_compound_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_compound_divide", test_swizzle_vector_compound_divide});
    extern void test_vector_swizzle_add();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_add", test_vector_swizzle_add});
    extern void test_vector_swizzle_subtract();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_subtract", test_vector_swizzle_subtract});
    extern void test_vector_swizzle_multiply();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_multiply", test_vector_swizzle_multiply});
    extern void test_vector_swizzle_divide();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_divide", test_vector_swizzle_divide});
    extern void test_vector_swizzle_compound_add();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_compound_add", test_vector_swizzle_compound_add});
    extern void test_vector_swizzle_compound_subtract();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_compound_subtract", test_vector_swizzle_compound_subtract});
    extern void test_vector_swizzle_compound_multiply();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_compound_multiply", test_vector_swizzle_compound_multiply});
    extern void test_vector_swizzle_compound_divide();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_compound_divide", test_vector_swizzle_compound_divide});
    extern void test_swizzle_vector_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_add", test_swizzle_vector_add});
    extern void test_swizzle_vector_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_subtract", test_swizzle_vector_subtract});
    extern void test_swizzle_vector_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_multiply", test_swizzle_vector_multiply});
    extern void test_swizzle_vector_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_divide", test_swizzle_vector_divide});
    extern void test_swizzle_vector_compound_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_compound_add", test_swizzle_vector_compound_add});
    extern void test_swizzle_vector_compound_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_compound_subtract", test_swizzle_vector_compound_subtract});
    extern void test_swizzle_vector_compound_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_compound_multiply", test_swizzle_vector_compound_multiply});
    extern void test_swizzle_vector_compound_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_vector_compound_divide", test_swizzle_vector_compound_divide});
    extern void test_vector_swizzle_add();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_add", test_vector_swizzle_add});
    extern void test_vector_swizzle_subtract();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_subtract", test_vector_swizzle_subtract});
    extern void test_vector_swizzle_multiply();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_multiply", test_vector_swizzle_multiply});
    extern void test_vector_swizzle_divide();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_divide", test_vector_swizzle_divide});
    extern void test_vector_swizzle_compound_add();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_compound_add", test_vector_swizzle_compound_add});
    extern void test_vector_swizzle_compound_subtract();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_compound_subtract", test_vector_swizzle_compound_subtract});
    extern void test_vector_swizzle_compound_multiply();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_compound_multiply", test_vector_swizzle_compound_multiply});
    extern void test_vector_swizzle_compound_divide();
    add(g_TestTable[string("vec.cpp")], test{"vector_swizzle_compound_divide", test_vector_swizzle_compound_divide});
    extern void test_swizzle_swizzle_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_add", test_swizzle_swizzle_add});
    extern void test_swizzle_swizzle_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_subtract", test_swizzle_swizzle_subtract});
    extern void test_swizzle_swizzle_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_multiply", test_swizzle_swizzle_multiply});
    extern void test_swizzle_swizzle_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_divide", test_swizzle_swizzle_divide});
    extern void test_swizzle_swizzle_compound_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_compound_add", test_swizzle_swizzle_compound_add});
    extern void test_swizzle_swizzle_compound_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_compound_subtract", test_swizzle_swizzle_compound_subtract});
    extern void test_swizzle_swizzle_compound_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_compound_multiply", test_swizzle_swizzle_compound_multiply});
    extern void test_swizzle_swizzle_compound_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_compound_divide", test_swizzle_swizzle_compound_divide});
    extern void test_swizzle_swizzle_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_add", test_swizzle_swizzle_add});
    extern void test_swizzle_swizzle_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_subtract", test_swizzle_swizzle_subtract});
    extern void test_swizzle_swizzle_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_multiply", test_swizzle_swizzle_multiply});
    extern void test_swizzle_swizzle_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_divide", test_swizzle_swizzle_divide});
    extern void test_swizzle_swizzle_compound_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_compound_add", test_swizzle_swizzle_compound_add});
    extern void test_swizzle_swizzle_compound_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_compound_subtract", test_swizzle_swizzle_compound_subtract});
    extern void test_swizzle_swizzle_compound_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_compound_multiply", test_swizzle_swizzle_compound_multiply});
    extern void test_swizzle_swizzle_compound_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_swizzle_compound_divide", test_swizzle_swizzle_compound_divide});
    extern void test_swizzle_scalar_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_add", test_swizzle_scalar_add});
    extern void test_swizzle_scalar_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_subtract", test_swizzle_scalar_subtract});
    extern void test_swizzle_scalar_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_multiply", test_swizzle_scalar_multiply});
    extern void test_swizzle_scalar_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_divide", test_swizzle_scalar_divide});
    extern void test_swizzle_scalar_compound_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_compound_add", test_swizzle_scalar_compound_add});
    extern void test_swizzle_scalar_compound_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_compound_subtract", test_swizzle_scalar_compound_subtract});
    extern void test_swizzle_scalar_compound_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_compound_multiply", test_swizzle_scalar_compound_multiply});
    extern void test_swizzle_scalar_compound_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_compound_divide", test_swizzle_scalar_compound_divide});
    extern void test_swizzle_scalar_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_add", test_swizzle_scalar_add});
    extern void test_swizzle_scalar_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_subtract", test_swizzle_scalar_subtract});
    extern void test_swizzle_scalar_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_multiply", test_swizzle_scalar_multiply});
    extern void test_swizzle_scalar_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_divide", test_swizzle_scalar_divide});
    extern void test_swizzle_scalar_compound_add();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_compound_add", test_swizzle_scalar_compound_add});
    extern void test_swizzle_scalar_compound_subtract();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_compound_subtract", test_swizzle_scalar_compound_subtract});
    extern void test_swizzle_scalar_compound_multiply();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_compound_multiply", test_swizzle_scalar_compound_multiply});
    extern void test_swizzle_scalar_compound_divide();
    add(g_TestTable[string("vec.cpp")], test{"swizzle_scalar_compound_divide", test_swizzle_scalar_compound_divide});
    extern void test_scalar_swizzle_add();
    add(g_TestTable[string("vec.cpp")], test{"scalar_swizzle_add", test_scalar_swizzle_add});
    extern void test_scalar_swizzle_subtract();
    add(g_TestTable[string("vec.cpp")], test{"scalar_swizzle_subtract", test_scalar_swizzle_subtract});
    extern void test_scalar_swizzle_multiply();
    add(g_TestTable[string("vec.cpp")], test{"scalar_swizzle_multiply", test_scalar_swizzle_multiply});
    extern void test_scalar_swizzle_divide();
    add(g_TestTable[string("vec.cpp")], test{"scalar_swizzle_divide", test_scalar_swizzle_divide});
    extern void test_is_null_vec();
    add(g_TestTable[string("vec.cpp")], test{"is_null_vec", test_is_null_vec});
    extern void test_length();
    add(g_TestTable[string("vec.cpp")], test{"length", test_length});
    extern void test_length_precise();
    add(g_TestTable[string("vec.cpp")], test{"length_precise", test_length_precise});
    extern void test_normalize();
    add(g_TestTable[string("vec.cpp")], test{"normalize", test_normalize});
    extern void test_safe_normalize_denom();
    add(g_TestTable[string("vec.cpp")], test{"safe_normalize_denom", test_safe_normalize_denom});
    extern void test_safe_normalize_null();
    add(g_TestTable[string("vec.cpp")], test{"safe_normalize_null", test_safe_normalize_null});
    extern void test_safe_normalize_specific_proper();
    add(g_TestTable[string("vec.cpp")], test{"safe_normalize_specific_proper", test_safe_normalize_specific_proper});
    extern void test_safe_normalize_specific_null();
    add(g_TestTable[string("vec.cpp")], test{"safe_normalize_specific_null", test_safe_normalize_specific_null});
    extern void test_fill_vec();
    add(g_TestTable[string("vec.cpp")], test{"fill_vec", test_fill_vec});
    extern void test_element_wise_min_max();
    add(g_TestTable[string("vec.cpp")], test{"element_wise_min_max", test_element_wise_min_max});
    extern void test_dot();
    add(g_TestTable[string("vec.cpp")], test{"dot", test_dot});
    extern void test_cross();
    add(g_TestTable[string("vec.cpp")], test{"cross", test_cross});
    extern void test_cross_nd();
    add(g_TestTable[string("vec.cpp")], test{"cross_nd", test_cross_nd});
}
