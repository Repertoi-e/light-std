// Generated by tools/gen_tokenizer.py. Do not edit by hand.
typedef struct { token_type Type; s64 Length; } scan_punct_result;
static inline scan_punct_result scan_punct(const char* s, s64 remaining) {
  scan_punct_result r = { TOKEN_INVALID, 0 };
  if (remaining <= 0) return r;
  switch (s[0]) {
    case '!': {
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_NOT_EQUAL; r.Length = 2; return r; }
      r.Type = TOKEN_EXCLAMATION; r.Length = 1; return r;
      break;
    }
    case '%': {
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_PERCENT_EQUAL; r.Length = 2; return r; }
      r.Type = TOKEN_PERCENT; r.Length = 1; return r;
      break;
    }
    case '&': {
      if (remaining >= 2 && s[1]=='&') { r.Type = TOKEN_DOUBLE_AND; r.Length = 2; return r; }
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_AND_EQUAL; r.Length = 2; return r; }
      r.Type = TOKEN_AND; r.Length = 1; return r;
      break;
    }
    case '(': {
      r.Type = TOKEN_PAREN_OPEN; r.Length = 1; return r;
      break;
    }
    case ')': {
      r.Type = TOKEN_PAREN_CLOSE; r.Length = 1; return r;
      break;
    }
    case '*': {
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_TIMES_EQUAL; r.Length = 2; return r; }
      r.Type = TOKEN_TIMES; r.Length = 1; return r;
      break;
    }
    case '+': {
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_PLUS_EQUAL; r.Length = 2; return r; }
      if (remaining >= 2 && s[1]=='+') { r.Type = TOKEN_INCREMENT; r.Length = 2; return r; }
      r.Type = TOKEN_PLUS; r.Length = 1; return r;
      break;
    }
    case ',': {
      r.Type = TOKEN_COMMA; r.Length = 1; return r;
      break;
    }
    case '-': {
      if (remaining >= 2 && s[1]=='>') { r.Type = TOKEN_ARROW; r.Length = 2; return r; }
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_MINUS_EQUAL; r.Length = 2; return r; }
      if (remaining >= 2 && s[1]=='-') { r.Type = TOKEN_DECREMENT; r.Length = 2; return r; }
      r.Type = TOKEN_MINUS; r.Length = 1; return r;
      break;
    }
    case '.': {
      if (remaining >= 3 && s[1]=='.' && s[2]=='.') { r.Type = TOKEN_TRIPLE_DOT; r.Length = 3; return r; }
      r.Type = TOKEN_DOT; r.Length = 1; return r;
      break;
    }
    case '/': {
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_SLASH_EQUAL; r.Length = 2; return r; }
      r.Type = TOKEN_SLASH; r.Length = 1; return r;
      break;
    }
    case ':': {
      r.Type = TOKEN_COLON; r.Length = 1; return r;
      break;
    }
    case ';': {
      r.Type = TOKEN_SEMICOLON; r.Length = 1; return r;
      break;
    }
    case '<': {
      if (remaining >= 3 && s[1]=='<' && s[2]=='=') { r.Type = TOKEN_LEFT_SHIFT_EQUAL; r.Length = 3; return r; }
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_LESS_EQUAL; r.Length = 2; return r; }
      if (remaining >= 2 && s[1]=='<') { r.Type = TOKEN_LEFT_SHIFT; r.Length = 2; return r; }
      r.Type = TOKEN_LESS; r.Length = 1; return r;
      break;
    }
    case '=': {
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_EQUALITY; r.Length = 2; return r; }
      r.Type = TOKEN_ASSIGN; r.Length = 1; return r;
      break;
    }
    case '>': {
      if (remaining >= 3 && s[1]=='>' && s[2]=='=') { r.Type = TOKEN_RIGHT_SHIFT_EQUAL; r.Length = 3; return r; }
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_GREATER_EQUAL; r.Length = 2; return r; }
      if (remaining >= 2 && s[1]=='>') { r.Type = TOKEN_RIGHT_SHIFT; r.Length = 2; return r; }
      r.Type = TOKEN_GREATER; r.Length = 1; return r;
      break;
    }
    case '@': {
      r.Type = TOKEN_AT; r.Length = 1; return r;
      break;
    }
    case '[': {
      r.Type = TOKEN_BRACKET_OPEN; r.Length = 1; return r;
      break;
    }
    case ']': {
      r.Type = TOKEN_BRACKET_CLOSE; r.Length = 1; return r;
      break;
    }
    case '^': {
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_XOR_EQUAL; r.Length = 2; return r; }
      r.Type = TOKEN_XOR; r.Length = 1; return r;
      break;
    }
    case '{': {
      r.Type = TOKEN_BRACE_OPEN; r.Length = 1; return r;
      break;
    }
    case '|': {
      if (remaining >= 2 && s[1]=='|') { r.Type = TOKEN_DOUBLE_OR; r.Length = 2; return r; }
      if (remaining >= 2 && s[1]=='=') { r.Type = TOKEN_OR_EQUAL; r.Length = 2; return r; }
      r.Type = TOKEN_OR; r.Length = 1; return r;
      break;
    }
    case '}': {
      r.Type = TOKEN_BRACE_CLOSE; r.Length = 1; return r;
      break;
    }
    case '~': {
      r.Type = TOKEN_TILDE; r.Length = 1; return r;
      break;
    }
    default: break;
  }
  return r;
}
