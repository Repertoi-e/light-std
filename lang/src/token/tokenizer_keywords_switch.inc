// Generated by tools/gen_tokenizer.py. Do not edit by hand.
static inline token_type classify_identifier_ascii(const char* s, s64 len) {
  switch (len) {
    case 2: {
      switch (s[0]) {
        case 'd': {
          if (s[1]=='o') return TOKEN_KW_do;
          break;
        }
        case 'i': {
          if (s[1]=='f') return TOKEN_KW_if;
          break;
        }
      default: break;
      }
      break;
    }
    case 3: {
      switch (s[0]) {
        case 'a': {
          if (s[1]=='s' && s[2]=='m') return TOKEN_KW_asm;
          break;
        }
        case 'f': {
          if (s[1]=='o' && s[2]=='r') return TOKEN_KW_for;
          break;
        }
        case 'i': {
          if (s[1]=='n' && s[2]=='t') return TOKEN_KW_int;
          break;
        }
      default: break;
      }
      break;
    }
    case 4: {
      switch (s[0]) {
        case 'a': {
          if (s[1]=='u' && s[2]=='t' && s[3]=='o') return TOKEN_KW_auto;
          break;
        }
        case 'c': {
          if (s[1]=='a' && s[2]=='s' && s[3]=='e') return TOKEN_KW_case;
          if (s[1]=='h' && s[2]=='a' && s[3]=='r') return TOKEN_KW_char;
          break;
        }
        case 'e': {
          if (s[1]=='l' && s[2]=='s' && s[3]=='e') return TOKEN_KW_else;
          if (s[1]=='n' && s[2]=='u' && s[3]=='m') return TOKEN_KW_enum;
          break;
        }
        case 'g': {
          if (s[1]=='o' && s[2]=='t' && s[3]=='o') return TOKEN_KW_goto;
          break;
        }
        case 'l': {
          if (s[1]=='o' && s[2]=='n' && s[3]=='g') return TOKEN_KW_long;
          break;
        }
        case 'v': {
          if (s[1]=='o' && s[2]=='i' && s[3]=='d') return TOKEN_KW_void;
          break;
        }
      default: break;
      }
      break;
    }
    case 5: {
      switch (s[0]) {
        case '_': {
          if (s[1]=='B' && s[2]=='o' && s[3]=='o' && s[4]=='l') return TOKEN_KW_Bool;
          break;
        }
        case 'b': {
          if (s[1]=='r' && s[2]=='e' && s[3]=='a' && s[4]=='k') return TOKEN_KW_break;
          break;
        }
        case 'c': {
          if (s[1]=='o' && s[2]=='n' && s[3]=='s' && s[4]=='t') return TOKEN_KW_const;
          break;
        }
        case 'f': {
          if (s[1]=='l' && s[2]=='o' && s[3]=='a' && s[4]=='t') return TOKEN_KW_float;
          break;
        }
        case 's': {
          if (s[1]=='h' && s[2]=='o' && s[3]=='r' && s[4]=='t') return TOKEN_KW_short;
          break;
        }
        case 'u': {
          if (s[1]=='n' && s[2]=='i' && s[3]=='o' && s[4]=='n') return TOKEN_KW_union;
          break;
        }
        case 'w': {
          if (s[1]=='h' && s[2]=='i' && s[3]=='l' && s[4]=='e') return TOKEN_KW_while;
          break;
        }
      default: break;
      }
      break;
    }
    case 6: {
      switch (s[0]) {
        case '_': {
          if (s[1]=='E' && s[2]=='m' && s[3]=='b' && s[4]=='e' && s[5]=='d') return TOKEN_KW_Embed;
          break;
        }
        case 'd': {
          if (s[1]=='o' && s[2]=='u' && s[3]=='b' && s[4]=='l' && s[5]=='e') return TOKEN_KW_double;
          break;
        }
        case 'e': {
          if (s[1]=='x' && s[2]=='t' && s[3]=='e' && s[4]=='r' && s[5]=='n') return TOKEN_KW_extern;
          break;
        }
        case 'i': {
          if (s[1]=='n' && s[2]=='l' && s[3]=='i' && s[4]=='n' && s[5]=='e') return TOKEN_KW_inline;
          break;
        }
        case 'r': {
          if (s[1]=='e' && s[2]=='t' && s[3]=='u' && s[4]=='r' && s[5]=='n') return TOKEN_KW_return;
          break;
        }
        case 's': {
          if (s[1]=='i' && s[2]=='g' && s[3]=='n' && s[4]=='e' && s[5]=='d') return TOKEN_KW_signed;
          if (s[1]=='i' && s[2]=='z' && s[3]=='e' && s[4]=='o' && s[5]=='f') return TOKEN_KW_sizeof;
          if (s[1]=='t' && s[2]=='a' && s[3]=='t' && s[4]=='i' && s[5]=='c') return TOKEN_KW_static;
          if (s[1]=='t' && s[2]=='r' && s[3]=='u' && s[4]=='c' && s[5]=='t') return TOKEN_KW_struct;
          if (s[1]=='w' && s[2]=='i' && s[3]=='t' && s[4]=='c' && s[5]=='h') return TOKEN_KW_switch;
          break;
        }
      default: break;
      }
      break;
    }
    case 7: {
      switch (s[0]) {
        case '_': {
          if (s[1]=='A' && s[2]=='t' && s[3]=='o' && s[4]=='m' && s[5]=='i' && s[6]=='c') return TOKEN_KW_Atomic;
          if (s[1]=='P' && s[2]=='r' && s[3]=='a' && s[4]=='g' && s[5]=='m' && s[6]=='a') return TOKEN_KW_Pragma;
          if (s[1]=='T' && s[2]=='y' && s[3]=='p' && s[4]=='e' && s[5]=='o' && s[6]=='f') return TOKEN_KW_Typeof;
          if (s[1]=='V' && s[2]=='e' && s[3]=='c' && s[4]=='t' && s[5]=='o' && s[6]=='r') return TOKEN_KW_Vector;
          if (s[1]=='_' && s[2]=='c' && s[3]=='d' && s[4]=='e' && s[5]=='c' && s[6]=='l') return TOKEN_KW_cdecl;
          break;
        }
        case 'd': {
          if (s[1]=='e' && s[2]=='f' && s[3]=='a' && s[4]=='u' && s[5]=='l' && s[6]=='t') return TOKEN_KW_default;
          break;
        }
        case 't': {
          if (s[1]=='y' && s[2]=='p' && s[3]=='e' && s[4]=='d' && s[5]=='e' && s[6]=='f') return TOKEN_KW_typedef;
          break;
        }
      default: break;
      }
      break;
    }
    case 8: {
      switch (s[0]) {
        case '_': {
          if (s[1]=='A' && s[2]=='l' && s[3]=='i' && s[4]=='g' && s[5]=='n' && s[6]=='a' && s[7]=='s') return TOKEN_KW_Alignas;
          if (s[1]=='A' && s[2]=='l' && s[3]=='i' && s[4]=='g' && s[5]=='n' && s[6]=='o' && s[7]=='f') return TOKEN_KW_Alignof;
          if (s[1]=='C' && s[2]=='o' && s[3]=='m' && s[4]=='p' && s[5]=='l' && s[6]=='e' && s[7]=='x') return TOKEN_KW_Complex;
          if (s[1]=='G' && s[2]=='e' && s[3]=='n' && s[4]=='e' && s[5]=='r' && s[6]=='i' && s[7]=='c') return TOKEN_KW_Generic;
          break;
        }
        case 'c': {
          if (s[1]=='o' && s[2]=='n' && s[3]=='t' && s[4]=='i' && s[5]=='n' && s[6]=='u' && s[7]=='e') return TOKEN_KW_continue;
          break;
        }
        case 'r': {
          if (s[1]=='e' && s[2]=='g' && s[3]=='i' && s[4]=='s' && s[5]=='t' && s[6]=='e' && s[7]=='r') return TOKEN_KW_register;
          if (s[1]=='e' && s[2]=='s' && s[3]=='t' && s[4]=='r' && s[5]=='i' && s[6]=='c' && s[7]=='t') return TOKEN_KW_restrict;
          break;
        }
        case 'u': {
          if (s[1]=='n' && s[2]=='s' && s[3]=='i' && s[4]=='g' && s[5]=='n' && s[6]=='e' && s[7]=='d') return TOKEN_KW_unsigned;
          break;
        }
        case 'v': {
          if (s[1]=='o' && s[2]=='l' && s[3]=='a' && s[4]=='t' && s[5]=='i' && s[6]=='l' && s[7]=='e') return TOKEN_KW_volatile;
          break;
        }
      default: break;
      }
      break;
    }
    case 9: {
      switch (s[0]) {
        case '_': {
          if (s[1]=='N' && s[2]=='o' && s[3]=='r' && s[4]=='e' && s[5]=='t' && s[6]=='u' && s[7]=='r' && s[8]=='n') return TOKEN_KW_Noreturn;
          if (s[1]=='_' && s[2]=='s' && s[3]=='t' && s[4]=='d' && s[5]=='c' && s[6]=='a' && s[7]=='l' && s[8]=='l') return TOKEN_KW_stdcall;
          break;
        }
      default: break;
      }
      break;
    }
    case 10: {
      switch (s[0]) {
        case '_': {
          if (s[1]=='I' && s[2]=='m' && s[3]=='a' && s[4]=='g' && s[5]=='i' && s[6]=='n' && s[7]=='a' && s[8]=='r' && s[9]=='y') return TOKEN_KW_Imaginary;
          if (s[1]=='_' && s[2]=='d' && s[3]=='e' && s[4]=='c' && s[5]=='l' && s[6]=='s' && s[7]=='p' && s[8]=='e' && s[9]=='c') return TOKEN_KW_declspec;
          break;
        }
      default: break;
      }
      break;
    }
    case 13: {
      switch (s[0]) {
        case '_': {
          if (s[1]=='T' && s[2]=='h' && s[3]=='r' && s[4]=='e' && s[5]=='a' && s[6]=='d' && s[7]=='_' && s[8]=='l' && s[9]=='o' && s[10]=='c' && s[11]=='a' && s[12]=='l') return TOKEN_KW_Thread_local;
          if (s[1]=='_' && s[2]=='a' && s[3]=='t' && s[4]=='t' && s[5]=='r' && s[6]=='i' && s[7]=='b' && s[8]=='u' && s[9]=='t' && s[10]=='e' && s[11]=='_' && s[12]=='_') return TOKEN_KW_attribute;
          break;
        }
      default: break;
      }
      break;
    }
    case 14: {
      switch (s[0]) {
        case '_': {
          if (s[1]=='S' && s[2]=='t' && s[3]=='a' && s[4]=='t' && s[5]=='i' && s[6]=='c' && s[7]=='_' && s[8]=='a' && s[9]=='s' && s[10]=='s' && s[11]=='e' && s[12]=='r' && s[13]=='t') return TOKEN_KW_Static_assert;
          break;
        }
      default: break;
      }
      break;
    }
    default: break;
  }
  return TOKEN_IDENTIFIER;
}
