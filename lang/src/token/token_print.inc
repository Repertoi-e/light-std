// Generated by tools/gen_tokenizer.py. Do not edit by hand.
const char* token_to_string(token_type t) {
  switch (t) {
    case TOKEN_KW_auto: return "auto";
    case TOKEN_KW_break: return "break";
    case TOKEN_KW_case: return "case";
    case TOKEN_KW_char: return "char";
    case TOKEN_KW_const: return "const";
    case TOKEN_KW_continue: return "continue";
    case TOKEN_KW_default: return "default";
    case TOKEN_KW_do: return "do";
    case TOKEN_KW_double: return "double";
    case TOKEN_KW_else: return "else";
    case TOKEN_KW_enum: return "enum";
    case TOKEN_KW_extern: return "extern";
    case TOKEN_KW_float: return "float";
    case TOKEN_KW_for: return "for";
    case TOKEN_KW_goto: return "goto";
    case TOKEN_KW_if: return "if";
    case TOKEN_KW_inline: return "inline";
    case TOKEN_KW_int: return "int";
    case TOKEN_KW_long: return "long";
    case TOKEN_KW_register: return "register";
    case TOKEN_KW_restrict: return "restrict";
    case TOKEN_KW_return: return "return";
    case TOKEN_KW_short: return "short";
    case TOKEN_KW_signed: return "signed";
    case TOKEN_KW_sizeof: return "sizeof";
    case TOKEN_KW_static: return "static";
    case TOKEN_KW_struct: return "struct";
    case TOKEN_KW_switch: return "switch";
    case TOKEN_KW_typedef: return "typedef";
    case TOKEN_KW_union: return "union";
    case TOKEN_KW_unsigned: return "unsigned";
    case TOKEN_KW_void: return "void";
    case TOKEN_KW_volatile: return "volatile";
    case TOKEN_KW_while: return "while";
    case TOKEN_KW_Alignas: return "_Alignas";
    case TOKEN_KW_Alignof: return "_Alignof";
    case TOKEN_KW_Atomic: return "_Atomic";
    case TOKEN_KW_Bool: return "_Bool";
    case TOKEN_KW_Complex: return "_Complex";
    case TOKEN_KW_Embed: return "_Embed";
    case TOKEN_KW_Generic: return "_Generic";
    case TOKEN_KW_Imaginary: return "_Imaginary";
    case TOKEN_KW_Pragma: return "_Pragma";
    case TOKEN_KW_Noreturn: return "_Noreturn";
    case TOKEN_KW_Static_assert: return "_Static_assert";
    case TOKEN_KW_Thread_local: return "_Thread_local";
    case TOKEN_KW_Typeof: return "_Typeof";
    case TOKEN_KW_Vector: return "_Vector";
    case TOKEN_KW_asm: return "asm";
    case TOKEN_KW_attribute: return "__attribute__";
    case TOKEN_KW_cdecl: return "__cdecl";
    case TOKEN_KW_stdcall: return "__stdcall";
    case TOKEN_KW_declspec: return "__declspec";
    case TOKEN_DOT: return ".";
    case TOKEN_COMMA: return ",";
    case TOKEN_PLUS: return "+";
    case TOKEN_MINUS: return "-";
    case TOKEN_TIMES: return "*";
    case TOKEN_SLASH: return "/";
    case TOKEN_PERCENT: return "%";
    case TOKEN_ASSIGN: return "=";
    case TOKEN_AND: return "&";
    case TOKEN_XOR: return "^";
    case TOKEN_OR: return "|";
    case TOKEN_AT: return "@";
    case TOKEN_TILDE: return "~";
    case TOKEN_EXCLAMATION: return "!";
    case TOKEN_COLON: return ":";
    case TOKEN_SEMICOLON: return ";";
    case TOKEN_LESS: return "<";
    case TOKEN_GREATER: return ">";
    case TOKEN_BRACKET_OPEN: return "[";
    case TOKEN_BRACKET_CLOSE: return "]";
    case TOKEN_PAREN_OPEN: return "(";
    case TOKEN_PAREN_CLOSE: return ")";
    case TOKEN_BRACE_OPEN: return "{";
    case TOKEN_BRACE_CLOSE: return "}";
    case TOKEN_ARROW: return "->";
    case TOKEN_DOUBLE_AND: return "&&";
    case TOKEN_DOUBLE_OR: return "||";
    case TOKEN_PLUS_EQUAL: return "+=";
    case TOKEN_MINUS_EQUAL: return "-=";
    case TOKEN_TIMES_EQUAL: return "*=";
    case TOKEN_SLASH_EQUAL: return "/=";
    case TOKEN_PERCENT_EQUAL: return "%=";
    case TOKEN_OR_EQUAL: return "|=";
    case TOKEN_AND_EQUAL: return "&=";
    case TOKEN_XOR_EQUAL: return "^=";
    case TOKEN_NOT_EQUAL: return "!=";
    case TOKEN_EQUALITY: return "==";
    case TOKEN_GREATER_EQUAL: return ">=";
    case TOKEN_LESS_EQUAL: return "<=";
    case TOKEN_LEFT_SHIFT: return "<<";
    case TOKEN_RIGHT_SHIFT: return ">>";
    case TOKEN_INCREMENT: return "++";
    case TOKEN_DECREMENT: return "--";
    case TOKEN_LEFT_SHIFT_EQUAL: return "<<=";
    case TOKEN_RIGHT_SHIFT_EQUAL: return ">>=";
    case TOKEN_TRIPLE_DOT: return "...";
    case TOKEN_IDENTIFIER: return "<identifier>";
    case TOKEN_INTEGER: return "<int>";
    case TOKEN_FLOAT: return "<float>";
    case TOKEN_STRING_DOUBLE_QUOTE: return "\"";
    case TOKEN_STRING_SINGLE_QUOTE: return "'";
    case TOKEN_STRING_WIDE_DOUBLE_QUOTE: return "L\"";
    case TOKEN_STRING_WIDE_SINGLE_QUOTE: return "L'";
    default: return "<unknown>";
  }
}
