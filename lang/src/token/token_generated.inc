/* 
 * Generated by gen_tokenizer.py. Do not edit by hand.
 * This file contains auto-generated token helper functions
 * 
 * Keywords: 53
 * Punctuators: 48
 * Total tokens: 103
 */

// Generated by gen_tokenizer.py. Do not edit by hand.
const char* token_to_string(token_type t) {
  switch (t) {
    case TOKEN_AND: return "&";
    case TOKEN_AND_EQUAL: return "&=";
    case TOKEN_ARROW: return "->";
    case TOKEN_ASSIGN: return "=";
    case TOKEN_AT: return "@";
    case TOKEN_BRACE_CLOSE: return "}";
    case TOKEN_BRACE_OPEN: return "{";
    case TOKEN_BRACKET_CLOSE: return "]";
    case TOKEN_BRACKET_OPEN: return "[";
    case TOKEN_COLON: return ":";
    case TOKEN_COMMA: return ",";
    case TOKEN_DECREMENT: return "--";
    case TOKEN_DOT: return ".";
    case TOKEN_DOUBLE_AND: return "&&";
    case TOKEN_DOUBLE_HASH: return "##";
    case TOKEN_DOUBLE_OR: return "||";
    case TOKEN_EQUALITY: return "==";
    case TOKEN_EXCLAMATION: return "!";
    case TOKEN_FLOAT: return "<float>";
    case TOKEN_GREATER: return ">";
    case TOKEN_GREATER_EQUAL: return ">=";
    case TOKEN_HASH: return "#";
    case TOKEN_INCREMENT: return "++";
    case TOKEN_INTEGER: return "<int>";
    case TOKEN_KW_Alignas: return "_Alignas";
    case TOKEN_KW_Alignof: return "_Alignof";
    case TOKEN_KW_Atomic: return "_Atomic";
    case TOKEN_KW_Bool: return "_Bool";
    case TOKEN_KW_Complex: return "_Complex";
    case TOKEN_KW_Embed: return "_Embed";
    case TOKEN_KW_Generic: return "_Generic";
    case TOKEN_KW_Imaginary: return "_Imaginary";
    case TOKEN_KW_Noreturn: return "_Noreturn";
    case TOKEN_KW_Pragma: return "_Pragma";
    case TOKEN_KW_Static_assert: return "_Static_assert";
    case TOKEN_KW_Thread_local: return "_Thread_local";
    case TOKEN_KW_Typeof: return "_Typeof";
    case TOKEN_KW_Vector: return "_Vector";
    case TOKEN_KW_asm: return "asm";
    case TOKEN_KW_attribute: return "attribute";
    case TOKEN_KW_auto: return "auto";
    case TOKEN_KW_break: return "break";
    case TOKEN_KW_case: return "case";
    case TOKEN_KW_cdecl: return "cdecl";
    case TOKEN_KW_char: return "char";
    case TOKEN_KW_const: return "const";
    case TOKEN_KW_continue: return "continue";
    case TOKEN_KW_declspec: return "declspec";
    case TOKEN_KW_default: return "default";
    case TOKEN_KW_do: return "do";
    case TOKEN_KW_double: return "double";
    case TOKEN_KW_else: return "else";
    case TOKEN_KW_enum: return "enum";
    case TOKEN_KW_extern: return "extern";
    case TOKEN_KW_float: return "float";
    case TOKEN_KW_for: return "for";
    case TOKEN_KW_goto: return "goto";
    case TOKEN_KW_if: return "if";
    case TOKEN_KW_inline: return "inline";
    case TOKEN_KW_int: return "int";
    case TOKEN_KW_long: return "long";
    case TOKEN_KW_register: return "register";
    case TOKEN_KW_restrict: return "restrict";
    case TOKEN_KW_return: return "return";
    case TOKEN_KW_short: return "short";
    case TOKEN_KW_signed: return "signed";
    case TOKEN_KW_sizeof: return "sizeof";
    case TOKEN_KW_static: return "static";
    case TOKEN_KW_stdcall: return "stdcall";
    case TOKEN_KW_struct: return "struct";
    case TOKEN_KW_switch: return "switch";
    case TOKEN_KW_typedef: return "typedef";
    case TOKEN_KW_union: return "union";
    case TOKEN_KW_unsigned: return "unsigned";
    case TOKEN_KW_void: return "void";
    case TOKEN_KW_volatile: return "volatile";
    case TOKEN_KW_while: return "while";
    case TOKEN_LEFT_SHIFT: return "<<";
    case TOKEN_LEFT_SHIFT_EQUAL: return "<<=";
    case TOKEN_LESS: return "<";
    case TOKEN_LESS_EQUAL: return "<=";
    case TOKEN_MINUS: return "-";
    case TOKEN_MINUS_EQUAL: return "-=";
    case TOKEN_NOT_EQUAL: return "!=";
    case TOKEN_OR: return "|";
    case TOKEN_OR_EQUAL: return "|=";
    case TOKEN_PAREN_CLOSE: return ")";
    case TOKEN_PAREN_OPEN: return "(";
    case TOKEN_PERCENT: return "%";
    case TOKEN_PERCENT_EQUAL: return "%=";
    case TOKEN_PLUS: return "+";
    case TOKEN_PLUS_EQUAL: return "+=";
    case TOKEN_RIGHT_SHIFT: return ">>";
    case TOKEN_RIGHT_SHIFT_EQUAL: return ">>=";
    case TOKEN_SEMICOLON: return ";";
    case TOKEN_SLASH: return "/";
    case TOKEN_SLASH_EQUAL: return "/=";
    case TOKEN_TILDE: return "~";
    case TOKEN_TIMES: return "*";
    case TOKEN_TIMES_EQUAL: return "*=";
    case TOKEN_TRIPLE_DOT: return "...";
    case TOKEN_XOR: return "^";
    case TOKEN_XOR_EQUAL: return "^=";
    default: return "<unknown>";
  }
}

// Generated by gen_tokenizer.py. Do not edit by hand.
// Always inline token switch for character-by-character matching
static inline token_type token_switch(const char* s, s64 length, s64* consumed) {
  *consumed = 0;
  if (length <= 0) return TOKEN_INVALID;

  switch (s[0]) {
    case '!': {
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_NOT_EQUAL; }
      *consumed = 1; return TOKEN_EXCLAMATION;
      break;
    }
    case '#': {
      if (length >= 2 && s[1] == '#') { *consumed = 2; return TOKEN_DOUBLE_HASH; }
      *consumed = 1; return TOKEN_HASH;
      break;
    }
    case '%': {
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_PERCENT_EQUAL; }
      *consumed = 1; return TOKEN_PERCENT;
      break;
    }
    case '&': {
      if (length >= 2 && s[1] == '&') { *consumed = 2; return TOKEN_DOUBLE_AND; }
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_AND_EQUAL; }
      *consumed = 1; return TOKEN_AND;
      break;
    }
    case '(': {
      *consumed = 1; return TOKEN_PAREN_OPEN;
      break;
    }
    case ')': {
      *consumed = 1; return TOKEN_PAREN_CLOSE;
      break;
    }
    case '*': {
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_TIMES_EQUAL; }
      *consumed = 1; return TOKEN_TIMES;
      break;
    }
    case '+': {
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_PLUS_EQUAL; }
      if (length >= 2 && s[1] == '+') { *consumed = 2; return TOKEN_INCREMENT; }
      *consumed = 1; return TOKEN_PLUS;
      break;
    }
    case ',': {
      *consumed = 1; return TOKEN_COMMA;
      break;
    }
    case '-': {
      if (length >= 2 && s[1] == '>') { *consumed = 2; return TOKEN_ARROW; }
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_MINUS_EQUAL; }
      if (length >= 2 && s[1] == '-') { *consumed = 2; return TOKEN_DECREMENT; }
      *consumed = 1; return TOKEN_MINUS;
      break;
    }
    case '.': {
      if (length >= 3 && s[1] == '.' && s[2] == '.') { *consumed = 3; return TOKEN_TRIPLE_DOT; }
      *consumed = 1; return TOKEN_DOT;
      break;
    }
    case '/': {
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_SLASH_EQUAL; }
      *consumed = 1; return TOKEN_SLASH;
      break;
    }
    case ':': {
      *consumed = 1; return TOKEN_COLON;
      break;
    }
    case ';': {
      *consumed = 1; return TOKEN_SEMICOLON;
      break;
    }
    case '<': {
      if (length >= 3 && s[1] == '<' && s[2] == '=') { *consumed = 3; return TOKEN_LEFT_SHIFT_EQUAL; }
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_LESS_EQUAL; }
      if (length >= 2 && s[1] == '<') { *consumed = 2; return TOKEN_LEFT_SHIFT; }
      *consumed = 1; return TOKEN_LESS;
      break;
    }
    case '=': {
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_EQUALITY; }
      *consumed = 1; return TOKEN_ASSIGN;
      break;
    }
    case '>': {
      if (length >= 3 && s[1] == '>' && s[2] == '=') { *consumed = 3; return TOKEN_RIGHT_SHIFT_EQUAL; }
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_GREATER_EQUAL; }
      if (length >= 2 && s[1] == '>') { *consumed = 2; return TOKEN_RIGHT_SHIFT; }
      *consumed = 1; return TOKEN_GREATER;
      break;
    }
    case '@': {
      *consumed = 1; return TOKEN_AT;
      break;
    }
    case '[': {
      *consumed = 1; return TOKEN_BRACKET_OPEN;
      break;
    }
    case ']': {
      *consumed = 1; return TOKEN_BRACKET_CLOSE;
      break;
    }
    case '^': {
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_XOR_EQUAL; }
      *consumed = 1; return TOKEN_XOR;
      break;
    }
    case '_': {
      if (length >= 8 && s[1] == 'A' && s[2] == 'l' && s[3] == 'i' && s[4] == 'g' && s[5] == 'n' && s[6] == 'a' && s[7] == 's' && (length == 8 || ((!ascii_is_alphanumeric(s[8]) && s[8] != '_')))) { *consumed = 8; return TOKEN_KW_Alignas; }
      if (length >= 8 && s[1] == 'A' && s[2] == 'l' && s[3] == 'i' && s[4] == 'g' && s[5] == 'n' && s[6] == 'o' && s[7] == 'f' && (length == 8 || ((!ascii_is_alphanumeric(s[8]) && s[8] != '_')))) { *consumed = 8; return TOKEN_KW_Alignof; }
      if (length >= 7 && s[1] == 'A' && s[2] == 't' && s[3] == 'o' && s[4] == 'm' && s[5] == 'i' && s[6] == 'c' && (length == 7 || ((!ascii_is_alphanumeric(s[7]) && s[7] != '_')))) { *consumed = 7; return TOKEN_KW_Atomic; }
      if (length >= 5 && s[1] == 'B' && s[2] == 'o' && s[3] == 'o' && s[4] == 'l' && (length == 5 || ((!ascii_is_alphanumeric(s[5]) && s[5] != '_')))) { *consumed = 5; return TOKEN_KW_Bool; }
      if (length >= 8 && s[1] == 'C' && s[2] == 'o' && s[3] == 'm' && s[4] == 'p' && s[5] == 'l' && s[6] == 'e' && s[7] == 'x' && (length == 8 || ((!ascii_is_alphanumeric(s[8]) && s[8] != '_')))) { *consumed = 8; return TOKEN_KW_Complex; }
      if (length >= 6 && s[1] == 'E' && s[2] == 'm' && s[3] == 'b' && s[4] == 'e' && s[5] == 'd' && (length == 6 || ((!ascii_is_alphanumeric(s[6]) && s[6] != '_')))) { *consumed = 6; return TOKEN_KW_Embed; }
      if (length >= 8 && s[1] == 'G' && s[2] == 'e' && s[3] == 'n' && s[4] == 'e' && s[5] == 'r' && s[6] == 'i' && s[7] == 'c' && (length == 8 || ((!ascii_is_alphanumeric(s[8]) && s[8] != '_')))) { *consumed = 8; return TOKEN_KW_Generic; }
      if (length >= 10 && s[1] == 'I' && s[2] == 'm' && s[3] == 'a' && s[4] == 'g' && s[5] == 'i' && s[6] == 'n' && s[7] == 'a' && s[8] == 'r' && s[9] == 'y' && (length == 10 || ((!ascii_is_alphanumeric(s[10]) && s[10] != '_')))) { *consumed = 10; return TOKEN_KW_Imaginary; }
      if (length >= 7 && s[1] == 'P' && s[2] == 'r' && s[3] == 'a' && s[4] == 'g' && s[5] == 'm' && s[6] == 'a' && (length == 7 || ((!ascii_is_alphanumeric(s[7]) && s[7] != '_')))) { *consumed = 7; return TOKEN_KW_Pragma; }
      if (length >= 9 && s[1] == 'N' && s[2] == 'o' && s[3] == 'r' && s[4] == 'e' && s[5] == 't' && s[6] == 'u' && s[7] == 'r' && s[8] == 'n' && (length == 9 || ((!ascii_is_alphanumeric(s[9]) && s[9] != '_')))) { *consumed = 9; return TOKEN_KW_Noreturn; }
      if (length >= 14 && s[1] == 'S' && s[2] == 't' && s[3] == 'a' && s[4] == 't' && s[5] == 'i' && s[6] == 'c' && s[7] == '_' && s[8] == 'a' && s[9] == 's' && s[10] == 's' && s[11] == 'e' && s[12] == 'r' && s[13] == 't' && (length == 14 || ((!ascii_is_alphanumeric(s[14]) && s[14] != '_')))) { *consumed = 14; return TOKEN_KW_Static_assert; }
      if (length >= 13 && s[1] == 'T' && s[2] == 'h' && s[3] == 'r' && s[4] == 'e' && s[5] == 'a' && s[6] == 'd' && s[7] == '_' && s[8] == 'l' && s[9] == 'o' && s[10] == 'c' && s[11] == 'a' && s[12] == 'l' && (length == 13 || ((!ascii_is_alphanumeric(s[13]) && s[13] != '_')))) { *consumed = 13; return TOKEN_KW_Thread_local; }
      if (length >= 7 && s[1] == 'T' && s[2] == 'y' && s[3] == 'p' && s[4] == 'e' && s[5] == 'o' && s[6] == 'f' && (length == 7 || ((!ascii_is_alphanumeric(s[7]) && s[7] != '_')))) { *consumed = 7; return TOKEN_KW_Typeof; }
      if (length >= 7 && s[1] == 'V' && s[2] == 'e' && s[3] == 'c' && s[4] == 't' && s[5] == 'o' && s[6] == 'r' && (length == 7 || ((!ascii_is_alphanumeric(s[7]) && s[7] != '_')))) { *consumed = 7; return TOKEN_KW_Vector; }
      break;
    }
    case 'a': {
      if (length >= 4 && s[1] == 'u' && s[2] == 't' && s[3] == 'o' && (length == 4 || ((!ascii_is_alphanumeric(s[4]) && s[4] != '_')))) { *consumed = 4; return TOKEN_KW_auto; }
      if (length >= 3 && s[1] == 's' && s[2] == 'm' && (length == 3 || ((!ascii_is_alphanumeric(s[3]) && s[3] != '_')))) { *consumed = 3; return TOKEN_KW_asm; }
      if (length >= 9 && s[1] == 't' && s[2] == 't' && s[3] == 'r' && s[4] == 'i' && s[5] == 'b' && s[6] == 'u' && s[7] == 't' && s[8] == 'e' && (length == 9 || ((!ascii_is_alphanumeric(s[9]) && s[9] != '_')))) { *consumed = 9; return TOKEN_KW_attribute; }
      break;
    }
    case 'b': {
      if (length >= 5 && s[1] == 'r' && s[2] == 'e' && s[3] == 'a' && s[4] == 'k' && (length == 5 || ((!ascii_is_alphanumeric(s[5]) && s[5] != '_')))) { *consumed = 5; return TOKEN_KW_break; }
      break;
    }
    case 'c': {
      if (length >= 4 && s[1] == 'a' && s[2] == 's' && s[3] == 'e' && (length == 4 || ((!ascii_is_alphanumeric(s[4]) && s[4] != '_')))) { *consumed = 4; return TOKEN_KW_case; }
      if (length >= 4 && s[1] == 'h' && s[2] == 'a' && s[3] == 'r' && (length == 4 || ((!ascii_is_alphanumeric(s[4]) && s[4] != '_')))) { *consumed = 4; return TOKEN_KW_char; }
      if (length >= 5 && s[1] == 'o' && s[2] == 'n' && s[3] == 's' && s[4] == 't' && (length == 5 || ((!ascii_is_alphanumeric(s[5]) && s[5] != '_')))) { *consumed = 5; return TOKEN_KW_const; }
      if (length >= 8 && s[1] == 'o' && s[2] == 'n' && s[3] == 't' && s[4] == 'i' && s[5] == 'n' && s[6] == 'u' && s[7] == 'e' && (length == 8 || ((!ascii_is_alphanumeric(s[8]) && s[8] != '_')))) { *consumed = 8; return TOKEN_KW_continue; }
      if (length >= 5 && s[1] == 'd' && s[2] == 'e' && s[3] == 'c' && s[4] == 'l' && (length == 5 || ((!ascii_is_alphanumeric(s[5]) && s[5] != '_')))) { *consumed = 5; return TOKEN_KW_cdecl; }
      break;
    }
    case 'd': {
      if (length >= 7 && s[1] == 'e' && s[2] == 'f' && s[3] == 'a' && s[4] == 'u' && s[5] == 'l' && s[6] == 't' && (length == 7 || ((!ascii_is_alphanumeric(s[7]) && s[7] != '_')))) { *consumed = 7; return TOKEN_KW_default; }
      if (length >= 2 && s[1] == 'o' && (length == 2 || ((!ascii_is_alphanumeric(s[2]) && s[2] != '_')))) { *consumed = 2; return TOKEN_KW_do; }
      if (length >= 6 && s[1] == 'o' && s[2] == 'u' && s[3] == 'b' && s[4] == 'l' && s[5] == 'e' && (length == 6 || ((!ascii_is_alphanumeric(s[6]) && s[6] != '_')))) { *consumed = 6; return TOKEN_KW_double; }
      if (length >= 8 && s[1] == 'e' && s[2] == 'c' && s[3] == 'l' && s[4] == 's' && s[5] == 'p' && s[6] == 'e' && s[7] == 'c' && (length == 8 || ((!ascii_is_alphanumeric(s[8]) && s[8] != '_')))) { *consumed = 8; return TOKEN_KW_declspec; }
      break;
    }
    case 'e': {
      if (length >= 4 && s[1] == 'l' && s[2] == 's' && s[3] == 'e' && (length == 4 || ((!ascii_is_alphanumeric(s[4]) && s[4] != '_')))) { *consumed = 4; return TOKEN_KW_else; }
      if (length >= 4 && s[1] == 'n' && s[2] == 'u' && s[3] == 'm' && (length == 4 || ((!ascii_is_alphanumeric(s[4]) && s[4] != '_')))) { *consumed = 4; return TOKEN_KW_enum; }
      if (length >= 6 && s[1] == 'x' && s[2] == 't' && s[3] == 'e' && s[4] == 'r' && s[5] == 'n' && (length == 6 || ((!ascii_is_alphanumeric(s[6]) && s[6] != '_')))) { *consumed = 6; return TOKEN_KW_extern; }
      break;
    }
    case 'f': {
      if (length >= 5 && s[1] == 'l' && s[2] == 'o' && s[3] == 'a' && s[4] == 't' && (length == 5 || ((!ascii_is_alphanumeric(s[5]) && s[5] != '_')))) { *consumed = 5; return TOKEN_KW_float; }
      if (length >= 3 && s[1] == 'o' && s[2] == 'r' && (length == 3 || ((!ascii_is_alphanumeric(s[3]) && s[3] != '_')))) { *consumed = 3; return TOKEN_KW_for; }
      break;
    }
    case 'g': {
      if (length >= 4 && s[1] == 'o' && s[2] == 't' && s[3] == 'o' && (length == 4 || ((!ascii_is_alphanumeric(s[4]) && s[4] != '_')))) { *consumed = 4; return TOKEN_KW_goto; }
      break;
    }
    case 'i': {
      if (length >= 2 && s[1] == 'f' && (length == 2 || ((!ascii_is_alphanumeric(s[2]) && s[2] != '_')))) { *consumed = 2; return TOKEN_KW_if; }
      if (length >= 6 && s[1] == 'n' && s[2] == 'l' && s[3] == 'i' && s[4] == 'n' && s[5] == 'e' && (length == 6 || ((!ascii_is_alphanumeric(s[6]) && s[6] != '_')))) { *consumed = 6; return TOKEN_KW_inline; }
      if (length >= 3 && s[1] == 'n' && s[2] == 't' && (length == 3 || ((!ascii_is_alphanumeric(s[3]) && s[3] != '_')))) { *consumed = 3; return TOKEN_KW_int; }
      break;
    }
    case 'l': {
      if (length >= 4 && s[1] == 'o' && s[2] == 'n' && s[3] == 'g' && (length == 4 || ((!ascii_is_alphanumeric(s[4]) && s[4] != '_')))) { *consumed = 4; return TOKEN_KW_long; }
      break;
    }
    case 'r': {
      if (length >= 8 && s[1] == 'e' && s[2] == 'g' && s[3] == 'i' && s[4] == 's' && s[5] == 't' && s[6] == 'e' && s[7] == 'r' && (length == 8 || ((!ascii_is_alphanumeric(s[8]) && s[8] != '_')))) { *consumed = 8; return TOKEN_KW_register; }
      if (length >= 8 && s[1] == 'e' && s[2] == 's' && s[3] == 't' && s[4] == 'r' && s[5] == 'i' && s[6] == 'c' && s[7] == 't' && (length == 8 || ((!ascii_is_alphanumeric(s[8]) && s[8] != '_')))) { *consumed = 8; return TOKEN_KW_restrict; }
      if (length >= 6 && s[1] == 'e' && s[2] == 't' && s[3] == 'u' && s[4] == 'r' && s[5] == 'n' && (length == 6 || ((!ascii_is_alphanumeric(s[6]) && s[6] != '_')))) { *consumed = 6; return TOKEN_KW_return; }
      break;
    }
    case 's': {
      if (length >= 5 && s[1] == 'h' && s[2] == 'o' && s[3] == 'r' && s[4] == 't' && (length == 5 || ((!ascii_is_alphanumeric(s[5]) && s[5] != '_')))) { *consumed = 5; return TOKEN_KW_short; }
      if (length >= 6 && s[1] == 'i' && s[2] == 'g' && s[3] == 'n' && s[4] == 'e' && s[5] == 'd' && (length == 6 || ((!ascii_is_alphanumeric(s[6]) && s[6] != '_')))) { *consumed = 6; return TOKEN_KW_signed; }
      if (length >= 6 && s[1] == 'i' && s[2] == 'z' && s[3] == 'e' && s[4] == 'o' && s[5] == 'f' && (length == 6 || ((!ascii_is_alphanumeric(s[6]) && s[6] != '_')))) { *consumed = 6; return TOKEN_KW_sizeof; }
      if (length >= 6 && s[1] == 't' && s[2] == 'a' && s[3] == 't' && s[4] == 'i' && s[5] == 'c' && (length == 6 || ((!ascii_is_alphanumeric(s[6]) && s[6] != '_')))) { *consumed = 6; return TOKEN_KW_static; }
      if (length >= 6 && s[1] == 't' && s[2] == 'r' && s[3] == 'u' && s[4] == 'c' && s[5] == 't' && (length == 6 || ((!ascii_is_alphanumeric(s[6]) && s[6] != '_')))) { *consumed = 6; return TOKEN_KW_struct; }
      if (length >= 6 && s[1] == 'w' && s[2] == 'i' && s[3] == 't' && s[4] == 'c' && s[5] == 'h' && (length == 6 || ((!ascii_is_alphanumeric(s[6]) && s[6] != '_')))) { *consumed = 6; return TOKEN_KW_switch; }
      if (length >= 7 && s[1] == 't' && s[2] == 'd' && s[3] == 'c' && s[4] == 'a' && s[5] == 'l' && s[6] == 'l' && (length == 7 || ((!ascii_is_alphanumeric(s[7]) && s[7] != '_')))) { *consumed = 7; return TOKEN_KW_stdcall; }
      break;
    }
    case 't': {
      if (length >= 7 && s[1] == 'y' && s[2] == 'p' && s[3] == 'e' && s[4] == 'd' && s[5] == 'e' && s[6] == 'f' && (length == 7 || ((!ascii_is_alphanumeric(s[7]) && s[7] != '_')))) { *consumed = 7; return TOKEN_KW_typedef; }
      break;
    }
    case 'u': {
      if (length >= 5 && s[1] == 'n' && s[2] == 'i' && s[3] == 'o' && s[4] == 'n' && (length == 5 || ((!ascii_is_alphanumeric(s[5]) && s[5] != '_')))) { *consumed = 5; return TOKEN_KW_union; }
      if (length >= 8 && s[1] == 'n' && s[2] == 's' && s[3] == 'i' && s[4] == 'g' && s[5] == 'n' && s[6] == 'e' && s[7] == 'd' && (length == 8 || ((!ascii_is_alphanumeric(s[8]) && s[8] != '_')))) { *consumed = 8; return TOKEN_KW_unsigned; }
      break;
    }
    case 'v': {
      if (length >= 4 && s[1] == 'o' && s[2] == 'i' && s[3] == 'd' && (length == 4 || ((!ascii_is_alphanumeric(s[4]) && s[4] != '_')))) { *consumed = 4; return TOKEN_KW_void; }
      if (length >= 8 && s[1] == 'o' && s[2] == 'l' && s[3] == 'a' && s[4] == 't' && s[5] == 'i' && s[6] == 'l' && s[7] == 'e' && (length == 8 || ((!ascii_is_alphanumeric(s[8]) && s[8] != '_')))) { *consumed = 8; return TOKEN_KW_volatile; }
      break;
    }
    case 'w': {
      if (length >= 5 && s[1] == 'h' && s[2] == 'i' && s[3] == 'l' && s[4] == 'e' && (length == 5 || ((!ascii_is_alphanumeric(s[5]) && s[5] != '_')))) { *consumed = 5; return TOKEN_KW_while; }
      break;
    }
    case '{': {
      *consumed = 1; return TOKEN_BRACE_OPEN;
      break;
    }
    case '|': {
      if (length >= 2 && s[1] == '|') { *consumed = 2; return TOKEN_DOUBLE_OR; }
      if (length >= 2 && s[1] == '=') { *consumed = 2; return TOKEN_OR_EQUAL; }
      *consumed = 1; return TOKEN_OR;
      break;
    }
    case '}': {
      *consumed = 1; return TOKEN_BRACE_CLOSE;
      break;
    }
    case '~': {
      *consumed = 1; return TOKEN_TILDE;
      break;
    }
    default: break;
  }

  // If we get here, check if it starts with ASCII identifier character
  // Note: Unicode identifiers that continue are handled in the main next_token function
  if (ascii_is_identifier_start(s[0])) {
    s64 i = 1;
    while (i < length && (ascii_is_identifier_cont(s[i]))) i++;
    *consumed = i;
    return TOKEN_IDENTIFIER;
  }

  return TOKEN_INVALID;
}